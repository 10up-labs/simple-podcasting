{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/blocks.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__","wp","i18n","blocks","registerBlockType","MediaUpload","Editable","RichText","InspectorControls","BlockControls","components","Button","FormToggle","PanelBody","PanelRow","title","description","category","icon","useOnce","attributes","id","type","src","source","selector","attribute","caption","podcastTerm","captioned","meta","default","explicit","podcastEpisode","edit","props","_props$attributes","align","className","setAttributes","isSelected","element","createElement","htmlFor","label","checked","onChange","key","controls","length","tagName","placeholder","onSelect","attachment","url","render","_ref","open","onClick","save","_props$attributes2"],"mappings":"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","file":"blocks.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Internal block libraries\n */\nconst { __ } = wp.i18n;\nconst {\n    registerBlockType,\n    Editable,\n    MediaUpload,\n    RichText,\n    InspectorControls,\n    BlockControls,\n} = wp.blocks;\nconst {\n    Button,\n    FormToggle,\n    PanelBody,\n    PanelRow,\n} = wp.components;\n\n/**\n * Register example block\n */\nexport default registerBlockType(\n    'podcasting/podcast',\n    {\n        title: __( 'Podcast' ),\n\t\tdescription: __( 'Insert a podcast episode into a post and add to a podcast feed.' ),\n        category: 'common',\n        icon: 'microphone',\n        useOnce: true,\n        attributes: {\n            id: {\n                type: 'number',\n            },\n            src: {\n             type: 'string',\n             source: 'attribute',\n             selector: 'audio',\n             attribute: 'src',\n            },\n            caption: {\n                type: 'array',\n                source: 'children',\n                selector: 'figcaption',\n            },\n            podcastTerm: {\n                type: 'string',\n            },\n            captioned: {\n                type: 'boolean',\n                source: 'meta',\n                meta: 'podcast_captioned',\n                default: false,\n            },\n            explicit: {\n                type: 'boolean',\n                source: 'meta',\n                meta: 'podcast_explicit',\n                default: false,\n            },\n            podcastEpisode: {\n                type: 'string',\n                source: 'meta',\n                meta: 'podcast_episode'\n            }\n        },\n        edit: props => {\n            const { attributes: { id, src, align, caption, podcastTerm, captioned, explicit, podcastEpisode },\n                className, setAttributes, isSelected } = props;\n            const onSelectAttachment = attachment => {\n                setAttributes( {\n                    id: attachment.id,\n                    src: attachment.url,\n                    caption: attachment.title,\n                } );\n            };\n            const onRemoveAttachment = () => {\n                setAttributes({\n                    id: null,\n                    src: null,\n                    caption: null,\n                });\n            }\n            const toggleExplicit  = () => setAttributes( { explicit: ! explicit } );\n            const toggleCaptioned = () => setAttributes( { captioned: ! captioned } );\n\n            return [\n                isSelected && (\n                    <InspectorControls>\n                        <PanelBody\n                          title={ __( 'Podcast Settings' ) }\n                        >\n                            <PanelRow>\n                                <label\n                                    htmlFor=\"podcast-captioned-form-toggle\"\n                                >\n                                    { __( 'Closed Captioned' ) }\n                                </label>\n                                <FormToggle\n                                    id=\"podcast-captioned-form-toggle\"\n                                    label={ __( 'Closed Captioned' ) }\n                                    checked={ captioned }\n                                    onChange={ toggleCaptioned }\n                                />\n                            </PanelRow>\n                            <PanelRow>\n                                <label\n                                    htmlFor=\"podcast-explicit-form-toggle\"\n                                >\n                                    { __( 'Explicit Content' ) }\n                                </label>\n                                <FormToggle\n                                    id=\"podcast-explicit-form-toggle\"\n                                    label={ __( 'Explicit Content' ) }\n                                    checked={ explicit }\n                                    onChange={ toggleExplicit }\n                                />\n                            </PanelRow>\n                        </PanelBody>\n                    </InspectorControls>\n                ),\n                <div className={ className }>\n\n                    { ! id ? (\n\n                        <MediaUpload\n                            onSelect={ onSelectAttachment }\n                            type=\"audio\"\n                            value={ id }\n                            render={ ( { open } ) => (\n                                <Button\n                                    className={ \"button button-large\" }\n                                    onClick={ open }\n                                >\n                                    { __( 'Upload / Select Podcast' ) }\n                                </Button>\n                            ) }\n                        >\n                        </MediaUpload>\n\n                    ) : (\n\n                        <figure key=\"audio\" className={ className }>\n                            <audio controls=\"controls\" src={ src } />\n                            { ( ( caption && caption.length ) || !! isSelected ) && (\n                                <RichText\n                                    tagName=\"figcaption\"\n                                    placeholder={ __( 'Write caption…' ) }\n                                    value={ caption }\n                                    onChange={ ( value ) => setAttributes( { caption: value } ) }\n                                    isSelected={ isSelected }\n                                />\n                            ) }\n                        </figure>\n                    )}\n\n                </div>\n            ];\n        },\n        save: props => {\n            const { id, src, align, caption, podcastTerm, captioned, explicit, podcastEpisode } = props.attributes;\n            return (\n                <figure className={ id ? `podcast-${ id }` : null }>\n                    <audio controls=\"controls\" src={ src } />\n                    { caption && caption.length > 0 && <figcaption>{ caption }</figcaption> }\n                </figure>\n            );\n        },\n    },\n);\n"],"sourceRoot":""}